# Plan to Refactor SteelSurge Website

## Current Structure Analysis
The current website has all HTML, CSS, and JavaScript combined in a single index.html file, making it difficult to maintain. The file includes:

1. HTML structure with multiple sections (home, about, sponsors, media, games, strategy)
2. CSS styles in the head section
3. Multiple JavaScript functions and event handlers
4. Game implementations (Pac-Man, Robot Builder, Memory Circuit, Maze Game)

## Proposed Folder Structure
```
SteelSurge/
├── index.html           # Main HTML file (home page)
├── team.html            # Team/about page
├── sponsors.html        # Sponsors page
├── media.html           # Media page
├── games.html           # Games page
├── strategy.html        # Strategy simulator page
├── css/
│   ├── styles.css       # Main styles
│   ├── themes.css       # Light/dark theme styles
│   ├── animations.css   # Animation-related styles
│   └── games.css        # Game-specific styles
├── js/
│   ├── main.js          # Core functionality
│   ├── themes.js        # Theme toggling
│   ├── particles.js     # Particles.js configuration
│   ├── animations.js    # Custom animations (robot, thunder)
│   ├── achievements.js  # Achievement system
│   └── games/
│       ├── pacman.js    # Pac-Man game implementation
│       ├── maze.js      # Maze game
│       ├── memory.js    # Memory Circuit game
│       └── robot.js     # Robot Builder game
└── static/              # Keep existing images directory
```

## Refactoring Steps

### 1. Extract CSS
- Move all styles from the `<style>` tag to css/styles.css
- Split theme-specific styles into css/themes.css
- Extract animation-related CSS to css/animations.css
- Create game-specific styles in css/games.css
- Link these stylesheets in all HTML files

### 2. Extract JavaScript
- Create js/main.js for core functionality and initialization
- Move theme toggling to js/themes.js
- Extract particles.js configuration to js/particles.js
- Move robot animation and thunder audio to js/animations.js
- Extract achievement system to js/achievements.js
- Create separate files for each game in the js/games/ directory
- Include the relevant script tags in each HTML file

### 3. Create Separate HTML Files
- Create a separate HTML file for each section (team.html, sponsors.html, etc.)
- Each file should include:
  - The same header/navigation bar
  - The same CSS and common JS includes
  - Content specific to that page
  - The same footer

### 4. Update Navigation Using Traditional HTML Links
- Replace the current JavaScript-based navigation with traditional anchor links
- Example:

```html
<nav>
  <h1>Steel Surge</h1>
  <div class="links">
    <a href="index.html">Home</a>
    <a href="team.html">Team</a>
    <a href="sponsors.html">Sponsors</a>
    <a href="media.html">Media</a>
    <a href="games.html">Games</a>
    <a href="strategy.html">Strategy</a>
  </div>
</nav>
```

### 5. Shared Elements Approach
- Create a common header and footer that's duplicated across files
- Use a consistent structure in all HTML files:

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Common meta tags, title, CSS links -->
</head>
<body>
  <!-- Common navigation bar -->
  
  <!-- Page-specific content -->
  
  <!-- Common footer -->
  
  <!-- Common scripts -->
  <!-- Page-specific scripts -->
</body>
</html>
```

### 6. Maintain Consistent User Experience
- Ensure all pages have the same theme toggle functionality
- Keep the particle.js background consistent across pages
- Maintain the same styling and branding

### 7. Additional Improvements
- Add proper page titles for each HTML file
- Implement responsive design consistently across all pages
- Add proper meta tags for SEO
- Ensure accessibility features work on all pages
- Consider adding a simple breadcrumb navigation

## Migration Strategy
1. Create the folder structure
2. Extract CSS files first
3. Create a template for the common page structure
4. Create individual HTML files based on the template
5. Move content from index.html sections to appropriate HTML files
6. Update navigation links in all files
7. Extract JavaScript to separate files
8. Test thoroughly to ensure all functionality works as before

## Benefits of This Approach
- Simplicity: Uses standard HTML linking without requiring JavaScript for basic navigation
- SEO-friendly: Each page has its own URL that can be indexed by search engines
- Performance: Each page loads only the content and scripts it needs
- Maintainability: Easier to update individual pages without affecting others
- Scalability: New pages can be added by following the same template

This refactoring will significantly improve maintainability, make the code easier to understand, and allow for better collaboration on different parts of the website.
